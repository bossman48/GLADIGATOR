# -*- coding: utf-8 -*-
"""Gather_Gene_Disease_Information.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yOnzwl2ifQZ-PjRxGfm4w1J6y83Bq3f9

# If you wan to gather data from disgenet please fill you email and password that are used register to Disgenet
"""
import config
email = config.config.get("email")
password = config.config.get("password")

"""# Read diseases_association.tsv file thta file is downloaded from disgenet"""

import csv
fileDiseases=open("../../source-files/disease_associations.tsv")
tsv_file_reader = csv.reader(fileDiseases, delimiter="\t")
rowsDiseases = []
for row in tsv_file_reader:
        rowsDiseases.append(row)


"""# Read gene_association.tsv file"""

import csv
fileGenes=open("../../source-files/gene_associations.tsv")
tsv_file_reader = csv.reader(fileGenes, delimiter="\t")
rowsGenes = []
for row in tsv_file_reader:
        rowsGenes.append(row)

"""# Gene seqeuence Informaiton is gathered"""

"""
  real application
"""

# importing the requests library
import requests


def getGeneSequence(uniprotid:str):
  # api-endpoint
  listData=[]
  URL = "https://rest.uniprot.org/uniprotkb/"+uniprotid+"?format=json"
  # sending get request and saving the response as response object
  r = requests.get(url = URL)
  # extracting data in json format
  data = r.json()
  try:
    listData.append(data["sequence"]["value"])
    listData.append(data["sequence"]["length"])
    listData.append(data["sequence"]["molWeight"])
    return listData

  except:
    print(uniprotid)
    return ""

def getGeneSequenceWithProteinName(uniprotid:str):
  # api-endpoint
  listData=[]
  URL = "https://rest.uniprot.org/uniprotkb/"+uniprotid+"?format=json"
  # sending get request and saving the response as response object
  r = requests.get(url = URL)
  # extracting data in json format
  data = r.json()
  try:

    listData.append(data["sequence"]["value"])
    listData.append(data["sequence"]["length"])
    listData.append(data["sequence"]["molWeight"])
    listData.append(data["proteinDescription"]["recommendedName"]["fullName"]["value"])
    return listData

  except:
    print(uniprotid)
    return ""

getGeneSequenceWithProteinName("P04217")

rowsGenes[0].append("sequence")
rowsGenes[0].append("lenght")
rowsGenes[0].append("molWeight")

print(rowsGenes[0])
print(rowsGenes[1])

"""# Get Apikey from disgenet platform to receive data from api"""

'''
Script example to use the DisGeNET REST API with the new authentication system
'''

#For this example we are going to use the python default http library
import requests

#Build a dict with the following format, change the value of the two keys your DisGeNET account credentials, if you don't have an account you can create one here https://www.disgenet.org/signup/
auth_params = {"email":email,"password":password}

api_host = "https://www.disgenet.org/api"

api_key = None
s = requests.Session()
try:
    r = s.post(api_host+'/auth/', data=auth_params)
    if(r.status_code == 200):
        #Lets store the api key in a new variable and use it again in new requests
        json_response = r.json()
        api_key = json_response.get("token")
        print(api_key + "This is your user API key.") #Comment this line if you don't want your API key to show up in the terminal
    else:
        print(r.status_code)
        print(r.text)
except requests.exceptions.RequestException as req_ex:
    print(req_ex)
    print("Something went wrong with the request.")

"""# Function that receive data from api with using GeneID (gen-diseases linked data)"""

def getGeneInformationFromApiWithUsingGeneID(geneID:int):
  try:
    #Add the api key to the requests headers of the requests Session object in order to use the restricted endpoints.
    s.headers.update({"Authorization": "Bearer %s" % api_key})
    #Lets get all the diseases associated to a gene eg. APP (EntrezID 351) and restricted by a source.
    gda_response = s.get(api_host+'/gda/gene/'+str(geneID))
    #gda_response = s.get(api_host+'/gene/')
    return gda_response.json()
  except Exception as exc:
    print(exc)

"""
example usage of the getGeneInformationFromApiWithUsingGeneID(int i) function
"""
import json
jsonFile= getGeneInformationFromApiWithUsingGeneID(1)

"""# Get all gene-disease linked data from disgenet"""

"""
gathering all gene data from api, source: gene_association.tzg
"""
allGeneData=[]

#delete tsv header from data
if(rowsGenes[0][0]=="geneId"):
  del rowsGenes[0]
  print("Data is cleaned from header")
else:
  print("Data was cleaned from header")

print("allGeneData will store data")
try:
  index=0
  for row in rowsGenes:
    try:
      if(index%50==0):
        print("Gene ID: ",int(row[0]), "  index : ",index ," requested : ",int(row[0]))
      allGeneData.append(getGeneInformationFromApiWithUsingGeneID(int(row[0]))[0])
    except Exception as exc:
      print(exc)
    index+=1
except Exception as exc:
  print(exc)

print("allGeneData has been assigned")
print(allGeneData[0])

"""# Save all gene data to text file"""

with open('../../source-files/AllGeneData.txt', 'w') as f:
    f.writelines(str(allGeneData))

print("AllGeneData.txt is built")
"""# Save all gene data to a csv that is a basis resource for toher processes"""

import pandas as pd

df = pd.DataFrame.from_dict(allGeneData)
df.to_csv (r'../../source-files/AllGeneData.csv', index = False, header=True)

print("AllGeneData.csv is built")
"""--------------------------

# Get gene-disease data in depth

---------------------------

# Detailed link data gathered from api
"""

def getGeneDiseaseLinkInformationFromApiWithUsingGeneSymbol(geneSymbol:str):
  try:
  #Add the api key to the requests headers of the requests Session object in order to use the restricted endpoints.
    s.headers.update({"Authorization": "Bearer %s" % api_key})
    #Lets get all the diseases associated to a gene eg. APP (EntrezID 351) and restricted by a source.
    gda_response = s.get(api_host+'/gda/gene/'+geneSymbol)
    #gda_response = s.get(api_host+'/gene/')
    return gda_response.json()
  except Excepiton as exc:
      print(exc)

"""# Try function get link data"""

print(getGeneDiseaseLinkInformationFromApiWithUsingGeneSymbol("NAT2"))


"""# Append new data to original graph.
# If gen has uniprotid, Read csv file to get genSymbol.
"""

import csv
rows = []
with open("../../source-files/AllGeneData.csv", 'r') as file:
  csvreader = csv.reader(file)
  header = next(csvreader)
  for row in csvreader:
    try:
      rows.append(row)
    except Excepiton as exc:
      print(exc)
print(header)

print(header)
print(rows[0])
print(rows[0][2])

"""check uniprotID is null or not. If there is null, dont think it in all data"""

"""
gathering all gene data from api, source: gene_association.tzg
"""
allGeneDiseaseLinkedData=[]
try:
  index=0
  for row in rows:
    try:
      if(row[2]!=""):
        if(index%50==0):
          print(row[1])
        allGeneDiseaseLinkedData.append(getGeneDiseaseLinkInformationFromApiWithUsingGeneSymbol(row[1]))
      index+=1
    except Excepiton as exc:
      print(exc)
except Exception as exc:
  print(exc)

print(allGeneDiseaseLinkedData[0])
print(len(allGeneDiseaseLinkedData))

"""Save gene-link data to a csv"""

import csv

# field names
fields = ['geneid', 'gene_symbol', 'uniprotid', 'gene_dsi', 'gene_dpi', 'gene_pli', 'protein_class',
          'protein_class_name', 'diseaseid', 'disease_name', 'disease_class',
          'disease_class_name', 'disease_type',
          'disease_semantic_type', 'score',
          'ei', 'el', 'year_initial', 'year_final','source']

with open('../../source-files/AllGeneDiseaseLinkedData40.csv', mode='w') as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=fields)

    writer.writeheader()
    for rows in allGeneDiseaseLinkedData:
      for row in rows:
        #print(row)
        try:
          writer.writerow(row)
        except Excepiton as exc:
          print(exc)

"""# Read AllGeneDiseaseLinkedData40.csv file to get gene sequence from uniprotkb

# You can use that to gather more information
"""

import csv
fileGenes=open("../../source-files/AllGeneDiseaseLinkedData40.csv")
tsv_file_reader = csv.reader(fileGenes)
rows = []
for row in tsv_file_reader:
        rows.append(row)

fieldForUniprotKB=rows[0]
print(fieldForUniprotKB)
print(len(rows))

print("Process is completed")